diff a/os/src/mm/page_table.rs b/os/src/mm/page_table.rs	(rejected hunks)
@@ -1,9 +1,12 @@
 //! Implementation of [`PageTableEntry`] and [`PageTable`].
 
-use super::{frame_alloc, FrameTracker, PhysPageNum, StepByOne, VirtAddr, VirtPageNum};
+
+use super::{frame_alloc, FrameTracker, MapPermission, PhysPageNum, StepByOne, VirtAddr, VirtPageNum};
 use alloc::vec;
 use alloc::vec::Vec;
 use bitflags::*;
+#[allow(unused)]
+use riscv::addr::page;
 
 bitflags! {
     /// page table entry flags
@@ -171,3 +229,13 @@ pub fn translated_byte_buffer(token: usize, ptr: *const u8, len: usize) -> Vec<&
     }
     v
 }
+
+/// Translate&Copy a ptr[T] array with LENGTH len to a mutable T Vec through page table
+pub fn get_pa_from_va(token: usize, ptr: usize) -> usize{
+    let page_table = PageTable::from_token(token);
+    let va = VirtAddr::from(ptr);
+    let vpn = va.floor();
+    let ppn = page_table.translate(vpn).unwrap().ppn();
+    let pa = usize::from(ppn) << 12 | va.page_offset();
+    pa.into()
+}
\ No newline at end of file
